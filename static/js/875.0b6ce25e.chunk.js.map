{"version":3,"file":"static/js/875.0b6ce25e.chunk.js","mappings":"qMAIO,MAAMA,EAAwB,CACnCC,EAAAA,KAAKC,KAAIC,EAAAA,EAAAA,OAAqB,CAACC,EAAGC,EAAKC,IAC9BD,EAAIC,EAAIC,KAAKC,OAKXA,EAA2B,CACtC,CACEC,GAAI,KACJC,KAAM,eACNC,YAAa,qFACbC,MAAO,UACPC,UACE,8HAEJ,CACEJ,GAAI,KACJC,KAAM,qBACNC,YAAa,wEACbC,MAAO,UACPC,UACE,iKAEJ,CACEJ,GAAI,KACJC,KAAM,kCACNG,UACE,gKACFC,MAAO,mHACPH,YAAa,0HACbC,MAAO,WAET,CACEH,GAAI,KACJC,KAAM,4BACNG,UACE,gKACFC,MAAO,gKACPH,YAAa,0HACbC,MAAO,WAET,CACEH,GAAI,KACJC,KAAM,4BACNG,UACE,8HACFC,MAAO,kEACPH,YAAa,6GACbC,MAAO,YCnDLG,EAGA,GACN,IAAIC,EAAS,EAEN,MAAMC,EAAmB,CAE9BhB,EAAAA,KAAKiB,KAAK,eAAeC,MAAOC,EAAKf,EAAKC,KACxC,MAAM,QAAEe,GAAYD,EAAIE,KAKxB,IAAKD,EACH,OAAOhB,EAAIC,EAAIiB,OAAO,KAAMjB,EAAIC,KAAK,CAAEiB,QAAS,mBAGlD,IACEC,QAAQC,IAAI,4BAA6BL,GACzC,MAAMM,EAAU,CAAElB,GAAIO,IAAUK,WAIhC,OAHAN,EAAea,KAAKD,GAEpBF,QAAQC,IAAI,0BAA2BX,SAC1BV,EAAIC,EAAIiB,OAAO,KAAMjB,EAAIC,KAAKoB,GAC7C,CAAE,MAAOE,GAEP,OADAJ,QAAQI,MAAM,0BAA2BA,GAClCxB,EAAIC,EAAIiB,OAAO,KAAMjB,EAAIC,KAAK,CAAEiB,QAAS,4BAClD,KAGFvB,EAAAA,KAAKC,IAAI,eAAe,CAACkB,EAAKf,EAAKC,KAEjC,MAAMwB,EAAOC,SAASX,EAAIY,IAAIC,aAAa/B,IAAI,SAAW,IAAK,IACzDgC,EAAOH,SAASX,EAAIY,IAAIC,aAAa/B,IAAI,SAAW,KAAM,IAC1DiC,EAAgBpB,EAAeqB,OAC/BC,EAAaC,KAAKC,KAAKJ,EAAgBD,GAEvCM,EAAQV,EAAOI,EACfO,EAAMD,EAAQN,EACdQ,EAAU3B,EAAe4B,MAAMH,EAAOC,GAsB5C,OApBAhB,QAAQC,IAAI,4BAA6B,CACvCgB,UACAE,SAAU,CACRC,KAAM,CAAEC,QAAQ,EAAMC,UAAU,EAAOC,OAAO,GAC9CC,WAAYnB,EACZoB,SAAUhB,EACViB,OAAQX,EACRY,SAAS,EACTC,OAAO,GAEThB,aACAF,gBACAmB,KAAMxB,IAASO,EAAa,EAC5BkB,OAAQzB,EACRI,OACAsB,iBAAkBd,EAAQN,OAC1BqB,MAAgB,IAAT3B,EACPkB,MAA0B,IAAnBN,EAAQN,SAGV/B,EACLC,EAAIiB,OAAO,KACXjB,EAAIC,KAAK,CACPmC,UACAE,SAAU,CACRC,KAAM,CAAEC,QAAQ,EAAMC,UAAU,EAAOC,OAAO,GAC9CC,WAAYnB,EACZoB,SAAUhB,EACViB,OAAQX,EACRY,SAAS,EACTC,OAAO,GAEThB,aACAF,gBACAmB,KAAMxB,IAASO,EAAa,EAC5BkB,OAAQzB,EACRI,OACAsB,iBAAkBd,EAAQN,OAC1BqB,MAAgB,IAAT3B,EACPkB,MAA0B,IAAnBN,EAAQN,SAElB,IAIHnC,EAAAA,KAAKyD,OAAO,uBAAuBvC,MAAOC,EAAKf,EAAKC,KAClD,MAAM,OAAEqD,GAAWvC,EAAIwC,OACjBnD,EAAKoD,MAAMC,QAAQH,GAAUA,EAAO,GAAKA,EACzCI,EAAQhD,EAAeiD,WAAWC,GAASA,EAAKxD,KAAOsB,SAAStB,EAAc,MAEpF,OAAe,IAAXsD,GACFhD,EAAemD,OAAOH,EAAO,GACtB1D,EAAIC,EAAIiB,OAAO,OAEflB,EAAIC,EAAIiB,OAAO,KAAMjB,EAAIC,KAAK,CAAEiB,QAAS,mBAClD,K,wBC5FG,MAAM2C,EAAsD,CACjE,CAAEC,MAAO,sBAAuBC,SAAU,aAC1C,CAAED,MAAO,sBAAuBC,SAAU,aAC1C,CAAED,MAAO,sBAAuBC,SAAU,aAC1C,CAAED,MAAO,sBAAuBC,SAAU,cAG/BC,EAAW,IACnBtE,KACAuE,EAAAA,KACAC,EAAAA,GAGHvE,EAAAA,KAAKiB,KAAK,yBAAyB,CAACE,EAAKf,EAAKC,KAC5C,MAAM,MAAE8D,EAAK,SAAEC,GAAajD,EAAIE,KAEhC,OAAK8C,GAAUC,GAKfF,EAAavC,KAAK,CAAEwC,QAAOC,aAGpBhE,EACLC,EAAIiB,OAAO,KACXjB,EAAIC,KAAK,CACPkE,MAAO,6CAVFpE,EAAIC,EAAIiB,OAAO,KAAMjB,EAAIC,KAAK,CAAEiB,QAAS,kGAYjD,IAIHvB,EAAAA,KAAKiB,KAAK,sBAAsB,CAACE,EAAKf,EAAKC,KACzC,MAAM,MAAE8D,EAAK,SAAEC,GAAajD,EAAIE,KAQhC,OALkB6C,EAAaO,MAC5BC,GAASA,EAAKP,QAAUA,GAASO,EAAKN,WAAaA,IAK7ChE,EACLC,EAAIiB,OAAO,KACXjB,EAAIC,KAAK,CACPkE,MAAO,mDAIXhD,QAAQC,IAAI,uFAELrB,EACLC,EAAIiB,OAAO,KACXjB,EAAIC,KAAK,CAAEiB,QAAS,iKAExB,IAIFvB,EAAAA,KAAKC,IAAI,qBAAqB,CAACkB,EAAKf,EAAKC,IAG1B,gBAFAc,EAAIY,IAAIC,aAAa/B,IAAI,QAG7BG,EACLC,EAAIiB,OAAO,KACXjB,EAAIC,KAAK,CACPkE,MAAO,mBAKNpE,EACLC,EAAIiB,OAAO,KACXjB,EAAIC,KAAK,CACPiB,QAAS,qBCxEJoD,GAASC,EAAAA,EAAAA,gBACjB7E,KACAuE,EAAAA,KACAtD,KAEAqD,KACAE,EAAAA,IAILI,EAAOE,OAAOC,GAAG,iBAAkB3D,IACjCK,QAAQC,IAAI,mBAAoBN,GAC5BA,EAAIY,IAAIgD,SAASC,WAAW,mBAC9B7D,EAAI8D,aACN,IAGFN,EAAOE,OAAOC,GAAG,qBAAsB3D,IACrCK,QAAQC,IAAI,qBAAsBN,EAAI,IAGxCwD,EAAOpC,MAAM,CACX2C,cAAe,CACbnD,IAAK,uC","sources":["api/hooks/categories.mock.ts","api/hooks/interestHandlers.ts","mocks/handlers.ts","mocks/browser.ts"],"sourcesContent":["import { rest } from 'msw';\r\n\r\nimport { getCategoriesPath } from './useGetCategorys';\r\n\r\nexport const categoriesMockHandler = [\r\n  rest.get(getCategoriesPath(), (_, res, ctx) => {\r\n    return res(ctx.json(CATEGORIES_RESPONSE_DATA));\r\n    //return res(ctx.json({ contents: CATEGORIES_RESPONSE_DATA })); // 데이터 구조 확인\r\n  }),\r\n];\r\n\r\nexport const CATEGORIES_RESPONSE_DATA = [\r\n  {\r\n    id: 2920,\r\n    name: '생일',\r\n    description: '감동을 높여줄 생일 선물 리스트',\r\n    color: '#5949a3',\r\n    image_url:\r\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Ft1.daumcdn.net%2Fgift%2Fhome%2Ftheme%2F292020231106_MXMUB.png',\r\n  },\r\n  {\r\n    id: 2930,\r\n    name: '교환권',\r\n    description: '놓치면 후회할 교환권 특가',\r\n    color: '#9290C3',\r\n    image_url:\r\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Fst.kakaocdn.net%2Fproduct%2Fgift%2Fproduct%2F20240131153049_5a22b137a8d346e9beb020a7a7f4254a.jpg',\r\n  },\r\n  {\r\n    id: 3302,\r\n    name: '건강/비타민',\r\n    image_url:\r\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Fst.kakaocdn.net%2Fproduct%2Fgift%2Fproduct%2F20230907164349_6605944da7c24d82b9c6ed60fcb75283.jpg',\r\n    title: '건강을 기원하는 마음 담아 선물하세요❤️',\r\n    description: '홍삼 / 녹용 / 비타민 / 콜라겐 / 오메가3 / 건강즙 등',\r\n    color: '#fc8197',\r\n  },\r\n  {\r\n    id: 3301,\r\n    name: '과일/한우',\r\n    image_url:\r\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Fst.kakaocdn.net%2Fproduct%2Fgift%2Fproduct%2F20240213090444_1b3dc970aec54eabbf3fbb7d35c0b7af.jpg',\r\n    title: '정성 가득한 과일/한우 선물로 감사한 마음을 전해보세요❤️',\r\n    description: '과일, 한우, 수입소고기, 돼지고기, 전복, 견과 등',\r\n    color: '#ed6d59',\r\n  },\r\n  {\r\n    id: 2926,\r\n    name: '출산/키즈',\r\n    image_url:\r\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Ft1.daumcdn.net%2Fgift%2Fhome%2Ftheme%2F292620240221_MLFJR.jpeg',\r\n    title: '벅찬 감동의 마음을 전할',\r\n    description: '엄마와 아이를 위한 세심한 선물👼🏻',\r\n    color: '#fc8197',\r\n  },\r\n];\r\n","import { rest } from 'msw';\r\n\r\nconst wishesDatabase: {\r\n  id: number;\r\n  product: { id: number; name: string; price: number; imageUrl: string };\r\n}[] = [];\r\nlet nextId = 1;\r\n\r\nexport const interestHandlers = [\r\n  //관심 목록 추가\r\n  rest.post('/api/wishes', async (req, res, ctx) => {\r\n    const { product } = req.body as {\r\n      product: { id: number; name: string; price: number; imageUrl: string };\r\n    };\r\n\r\n    //유효성 검사\r\n    if (!product) {\r\n      return res(ctx.status(400), ctx.json({ message: 'Invalid input' }));\r\n    }\r\n\r\n    try {\r\n      console.log('POST /api/wishes request:', product);\r\n      const newWish = { id: nextId++, product }; //새로운 위시 추가\r\n      wishesDatabase.push(newWish);\r\n\r\n      console.log('Current wishesDatabase:', wishesDatabase);\r\n      return await res(ctx.status(201), ctx.json(newWish));\r\n    } catch (error) {\r\n      console.error('POST /api/wishes error:', error);\r\n      return res(ctx.status(500), ctx.json({ message: 'Failed to add wish item' }));\r\n    }\r\n  }),\r\n\r\n  rest.get('/api/wishes', (req, res, ctx) => {\r\n    //관심 목록 리스트 불러오기\r\n    const page = parseInt(req.url.searchParams.get('page') || '0', 10);\r\n    const size = parseInt(req.url.searchParams.get('size') || '10', 10);\r\n    const totalElements = wishesDatabase.length;\r\n    const totalPages = Math.ceil(totalElements / size);\r\n\r\n    const start = page * size;\r\n    const end = start + size;\r\n    const content = wishesDatabase.slice(start, end);\r\n\r\n    console.log('GET /api/wishes response:', {\r\n      content,\r\n      pageable: {\r\n        sort: { sorted: true, unsorted: false, empty: false },\r\n        pageNumber: page,\r\n        pageSize: size,\r\n        offset: start,\r\n        unpaged: false,\r\n        paged: true,\r\n      },\r\n      totalPages,\r\n      totalElements,\r\n      last: page === totalPages - 1,\r\n      number: page,\r\n      size,\r\n      numberOfElements: content.length,\r\n      first: page === 0,\r\n      empty: content.length === 0,\r\n    });\r\n\r\n    return res(\r\n      ctx.status(200),\r\n      ctx.json({\r\n        content,\r\n        pageable: {\r\n          sort: { sorted: true, unsorted: false, empty: false },\r\n          pageNumber: page,\r\n          pageSize: size,\r\n          offset: start,\r\n          unpaged: false,\r\n          paged: true,\r\n        },\r\n        totalPages,\r\n        totalElements,\r\n        last: page === totalPages - 1,\r\n        number: page,\r\n        size,\r\n        numberOfElements: content.length,\r\n        first: page === 0,\r\n        empty: content.length === 0,\r\n      }),\r\n    );\r\n  }),\r\n\r\n  // 위시 삭제 핸들러 추가\r\n  rest.delete('/api/wishes/:wishId', async (req, res, ctx) => {\r\n    const { wishId } = req.params;\r\n    const id = Array.isArray(wishId) ? wishId[0] : wishId;\r\n    const index = wishesDatabase.findIndex((wish) => wish.id === parseInt(id as string, 10));\r\n\r\n    if (index !== -1) {\r\n      wishesDatabase.splice(index, 1); // 위시 삭제\r\n      return res(ctx.status(204)); // 성공 응답\r\n    } else {\r\n      return res(ctx.status(404), ctx.json({ message: 'Item not found' }));\r\n    }\r\n  }),\r\n];\r\n","import { rest } from 'msw';\r\n\r\nimport { categoriesMockHandler } from '@/api/hooks/categories.mock';\r\nimport { productsMockHandler } from '@/api/hooks/products.mock';\r\nimport { pointHandlers } from '@/api/hooks/usePoint';\r\n\r\n// 가상 데이터베이스\r\nexport const userDatabase: { email: string; password: string }[] = [\r\n  { email: 'server1@example.com', password: 'password1' },\r\n  { email: 'server2@example.com', password: 'password2' },\r\n  { email: 'server3@example.com', password: 'password3' },\r\n  { email: 'server4@example.com', password: 'password4' },\r\n];\r\n\r\nexport const handlers = [\r\n  ...categoriesMockHandler,\r\n  ...productsMockHandler,\r\n  ...pointHandlers,\r\n\r\n  // 회원가입 핸들러 추가\r\n  rest.post('/api/members/register', (req, res, ctx) => {\r\n    const { email, password } = req.body as { email: string; password: string };\r\n\r\n    if (!email || !password) {\r\n      return res(ctx.status(400), ctx.json({ message: '이메일과 비밀번호를 입력해주세요 ' }));\r\n    }\r\n\r\n    // 가상 데이터베이스에 사용자 정보 저장\r\n    userDatabase.push({ email, password });\r\n\r\n    // 성공 응답 예제\r\n    return res(\r\n      ctx.status(200),\r\n      ctx.json({\r\n        token: '가입 성공 토큰',\r\n      }),\r\n    );\r\n  }),\r\n\r\n  // 로그인 핸들러\r\n  rest.post('/api/members/login', (req, res, ctx) => {\r\n    const { email, password } = req.body as { email: string; password: string };\r\n    //console.log('로그인 요청 데이터:', { email, password });\r\n\r\n    const loginUser = userDatabase.find(\r\n      (user) => user.email === email && user.password === password,\r\n    );\r\n\r\n    // 성공 시\r\n    if (loginUser) {\r\n      return res(\r\n        ctx.status(200),\r\n        ctx.json({\r\n          token: '로그인 성공 토큰',\r\n        }),\r\n      );\r\n    } else {\r\n      console.log('로그인 실패: 사용자 정보 불일치');\r\n      // 실패 시\r\n      return res(\r\n        ctx.status(400),\r\n        ctx.json({ message: '로그인에 실패했습니다. 아이디나 비밀번호를 확인해주세요' }),\r\n      );\r\n    }\r\n  }),\r\n\r\n  // 카카오 로그인 핸들러 추가\r\n  rest.get('/api/oauth2/kakao', (req, res, ctx) => {\r\n    const code = req.url.searchParams.get('code');\r\n\r\n    if (code === 'exampleCode') {\r\n      return res(\r\n        ctx.status(200),\r\n        ctx.json({\r\n          token: 'example-token',\r\n        }),\r\n      );\r\n    }\r\n\r\n    return res(\r\n      ctx.status(400),\r\n      ctx.json({\r\n        message: 'Invalid code',\r\n      }),\r\n    );\r\n  }),\r\n];\r\n","import { setupWorker } from 'msw';\r\n\r\nimport { categoriesMockHandler } from '@/api/hooks/categories.mock';\r\nimport { interestHandlers } from '@/api/hooks/interestHandlers';\r\n//import { loginHandler } from '@/api/hooks/login.mock';\r\nimport { productsMockHandler } from '@/api/hooks/products.mock';\r\nimport { pointHandlers } from '@/api/hooks/usePoint';\r\n\r\nimport { handlers } from './handlers';\r\n\r\nexport const worker = setupWorker(\r\n  ...categoriesMockHandler,\r\n  ...productsMockHandler,\r\n  ...interestHandlers,\r\n  // ...loginHandler,\r\n  ...handlers,\r\n  ...pointHandlers,\r\n);\r\n\r\n// 요청 무시 설정\r\nworker.events.on('request:match', (req) => {\r\n  console.log('Matched request:', req);\r\n  if (req.url.pathname.startsWith('/static/media/')) {\r\n    req.passthrough();\r\n  }\r\n});\r\n\r\nworker.events.on('request:unhandled', (req) => {\r\n  console.log('Unhandled request:', req);\r\n});\r\n\r\nworker.start({\r\n  serviceWorker: {\r\n    url: '/react-deploy/mockServiceWorker.js', // GitHub Pages의 서브 디렉토리에 맞게 경로 설정\r\n  },\r\n});\r\n"],"names":["categoriesMockHandler","rest","get","getCategoriesPath","_","res","ctx","json","CATEGORIES_RESPONSE_DATA","id","name","description","color","image_url","title","wishesDatabase","nextId","interestHandlers","post","async","req","product","body","status","message","console","log","newWish","push","error","page","parseInt","url","searchParams","size","totalElements","length","totalPages","Math","ceil","start","end","content","slice","pageable","sort","sorted","unsorted","empty","pageNumber","pageSize","offset","unpaged","paged","last","number","numberOfElements","first","delete","wishId","params","Array","isArray","index","findIndex","wish","splice","userDatabase","email","password","handlers","productsMockHandler","pointHandlers","token","find","user","worker","setupWorker","events","on","pathname","startsWith","passthrough","serviceWorker"],"sourceRoot":""}