{"version":3,"file":"static/js/351.f88d269a.chunk.js","mappings":"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","sources":["api/hooks/categories.mock.ts","api/hooks/interestHandlers.ts","api/hooks/products.mock.ts","mocks/handlers.ts","mocks/browser.ts"],"sourcesContent":["import { rest } from 'msw';\r\n\r\nimport { getCategoriesPath } from './useGetCategorys';\r\n\r\nexport const categoriesMockHandler = [\r\n  rest.get(getCategoriesPath(), (_, res, ctx) => {\r\n    return res(ctx.json(CATEGORIES_RESPONSE_DATA));\r\n  }),\r\n];\r\n\r\nconst CATEGORIES_RESPONSE_DATA = [\r\n  {\r\n    id: 2920,\r\n    name: '생일',\r\n    description: '감동을 높여줄 생일 선물 리스트',\r\n    color: '#5949a3',\r\n    imageUrl:\r\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Ft1.daumcdn.net%2Fgift%2Fhome%2Ftheme%2F292020231106_MXMUB.png',\r\n  },\r\n  {\r\n    id: 2930,\r\n    name: '교환권',\r\n    description: '놓치면 후회할 교환권 특가',\r\n    color: '#9290C3',\r\n    imageUrl:\r\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Fst.kakaocdn.net%2Fproduct%2Fgift%2Fproduct%2F20240131153049_5a22b137a8d346e9beb020a7a7f4254a.jpg',\r\n  },\r\n];\r\n","import { rest } from 'msw';\r\n\r\nconst wishesDatabase: {\r\n  id: number;\r\n  product: { id: number; name: string; price: number; imageUrl: string };\r\n}[] = [];\r\nlet nextId = 1;\r\n\r\nexport const interestHandlers = [\r\n  //관심 목록 추가\r\n  rest.post('/api/wishes', async (req, res, ctx) => {\r\n    const { product } = req.body as {\r\n      product: { id: number; name: string; price: number; imageUrl: string };\r\n    };\r\n\r\n    //유효성 검사\r\n    if (!product) {\r\n      return res(ctx.status(400), ctx.json({ message: 'Invalid input' }));\r\n    }\r\n\r\n    try {\r\n      console.log('POST /api/wishes request:', product);\r\n      const newWish = { id: nextId++, product }; //새로운 위시 추가\r\n      wishesDatabase.push(newWish);\r\n\r\n      console.log('Current wishesDatabase:', wishesDatabase);\r\n      return await res(ctx.status(201), ctx.json(newWish));\r\n    } catch (error) {\r\n      console.error('POST /api/wishes error:', error);\r\n      return res(ctx.status(500), ctx.json({ message: 'Failed to add wish item' }));\r\n    }\r\n  }),\r\n\r\n  rest.get('/api/wishes', (req, res, ctx) => {\r\n    //관심 목록 리스트 불러오기\r\n    const page = parseInt(req.url.searchParams.get('page') || '0', 10);\r\n    const size = parseInt(req.url.searchParams.get('size') || '10', 10);\r\n    const totalElements = wishesDatabase.length;\r\n    const totalPages = Math.ceil(totalElements / size);\r\n\r\n    const start = page * size;\r\n    const end = start + size;\r\n    const content = wishesDatabase.slice(start, end);\r\n\r\n    console.log('GET /api/wishes response:', {\r\n      content,\r\n      pageable: {\r\n        sort: { sorted: true, unsorted: false, empty: false },\r\n        pageNumber: page,\r\n        pageSize: size,\r\n        offset: start,\r\n        unpaged: false,\r\n        paged: true,\r\n      },\r\n      totalPages,\r\n      totalElements,\r\n      last: page === totalPages - 1,\r\n      number: page,\r\n      size,\r\n      numberOfElements: content.length,\r\n      first: page === 0,\r\n      empty: content.length === 0,\r\n    });\r\n\r\n    return res(\r\n      ctx.status(200),\r\n      ctx.json({\r\n        content,\r\n        pageable: {\r\n          sort: { sorted: true, unsorted: false, empty: false },\r\n          pageNumber: page,\r\n          pageSize: size,\r\n          offset: start,\r\n          unpaged: false,\r\n          paged: true,\r\n        },\r\n        totalPages,\r\n        totalElements,\r\n        last: page === totalPages - 1,\r\n        number: page,\r\n        size,\r\n        numberOfElements: content.length,\r\n        first: page === 0,\r\n        empty: content.length === 0,\r\n      }),\r\n    );\r\n  }),\r\n\r\n  // 위시 삭제 핸들러 추가\r\n  rest.delete('/api/wishes/:wishId', async (req, res, ctx) => {\r\n    const { wishId } = req.params;\r\n    const id = Array.isArray(wishId) ? wishId[0] : wishId;\r\n    const index = wishesDatabase.findIndex((wish) => wish.id === parseInt(id as string, 10));\r\n\r\n    if (index !== -1) {\r\n      wishesDatabase.splice(index, 1); // 위시 삭제\r\n      return res(ctx.status(204)); // 성공 응답\r\n    } else {\r\n      return res(ctx.status(404), ctx.json({ message: 'Item not found' }));\r\n    }\r\n  }),\r\n];\r\n","import { rest } from 'msw';\r\n\r\nimport { getProductDetailPath } from './useGetProductDetail';\r\nimport { getProductOptionsPath } from './useGetProductOptions';\r\nimport { getProductsPath } from './useGetProducts';\r\n\r\nexport const productsMockHandler = [\r\n  rest.get(getProductsPath({ categoryId: '2920' }), (req, res, ctx) => {\r\n    const categoryId = req.url.searchParams.get('categoryId');\r\n\r\n    if (categoryId === '2920') {\r\n      return res(ctx.json(PRODUCTS_MOCK_DATA));\r\n    }\r\n    return res(ctx.status(404));\r\n  }),\r\n  rest.get(getProductsPath({ categoryId: '2930' }), (req, res, ctx) => {\r\n    const categoryId = req.url.searchParams.get('categoryId');\r\n\r\n    if (categoryId === '2930') {\r\n      return res(ctx.json(PRODUCTS_MOCK_DATA));\r\n    }\r\n    return res(ctx.status(404));\r\n  }),\r\n  rest.get(getProductDetailPath(':productId'), (req, res, ctx) => {\r\n    const { productId } = req.params;\r\n    const product = PRODUCTS_MOCK_DATA.content.find((item) => item.id.toString() === productId);\r\n    return res(ctx.json(product || PRODUCTS_MOCK_DATA.content[0]));\r\n  }),\r\n  rest.get(getProductOptionsPath(':productId'), (_, res, ctx) => {\r\n    return res(\r\n      ctx.json([\r\n        {\r\n          id: 1,\r\n          name: 'Option A',\r\n          quantity: 10,\r\n          productId: 1,\r\n        },\r\n        {\r\n          id: 2,\r\n          name: 'Option B',\r\n          quantity: 20,\r\n          productId: 1,\r\n        },\r\n      ]),\r\n    );\r\n  }),\r\n];\r\n\r\nexport const PRODUCTS_MOCK_DATA = {\r\n  content: [\r\n    {\r\n      id: 3245119,\r\n      name: '[단독각인] 피렌체 1221 에디션 오드코롱 50ml (13종 택1)',\r\n      imageUrl:\r\n        'https://st.kakaocdn.net/product/gift/product/20240215083306_8e1db057580145829542463a84971ae3.png',\r\n      price: 145000,\r\n    },\r\n    {\r\n      id: 2263833,\r\n      name: '외식 통합권 10만원권',\r\n      imageUrl:\r\n        'https://st.kakaocdn.net/product/gift/product/20200513102805_4867c1e4a7ae43b5825e9ae14e2830e3.png',\r\n      price: 100000,\r\n    },\r\n    {\r\n      id: 6502823,\r\n      name: '[선물포장/미니퍼퓸증정] 디켄터 리드 디퓨저 300ml + 메세지카드',\r\n      imageUrl:\r\n        'https://st.kakaocdn.net/product/gift/product/20240215112140_11f857e972bc4de6ac1d2f1af47ce182.jpg',\r\n      price: 108000,\r\n    },\r\n    {\r\n      id: 1181831,\r\n      name: '[선물포장] 소바쥬 오 드 뚜왈렛 60ML',\r\n      imageUrl:\r\n        'https://st.kakaocdn.net/product/gift/product/20240214150740_ad25267defa64912a7c030a7b57dc090.jpg',\r\n      price: 122000,\r\n    },\r\n    {\r\n      id: 1379982,\r\n      name: '[정관장] 홍삼정 에브리타임 리미티드 (10ml x 30포)',\r\n      imageUrl:\r\n        'https://st.kakaocdn.net/product/gift/product/20240118135914_a6e1a7442ea04aa49add5e02ed62b4c3.jpg',\r\n      price: 133000,\r\n    },\r\n  ],\r\n  number: 0,\r\n  totalElements: 5,\r\n  size: 10,\r\n  last: true,\r\n};\r\n","import { rest } from 'msw';\r\n\r\nimport { categoriesMockHandler } from '@/api/hooks/categories.mock';\r\nimport { productsMockHandler } from '@/api/hooks/products.mock';\r\n\r\n//가상 데이터베이스\r\nexport const userDatabase: { email: string; password: string }[] = [\r\n  { email: 'server1@example.com', password: 'password1' },\r\n  { email: 'server2@example.com', password: 'password2' },\r\n  { email: 'server3@example.com', password: 'password3' },\r\n  { email: 'server4@example.com', password: 'password4' },\r\n];\r\n\r\nexport const handlers = [\r\n  ...categoriesMockHandler,\r\n  ...productsMockHandler,\r\n\r\n  // 회원가입 핸들러 추가\r\n  rest.post('/api/members/register', (req, res, ctx) => {\r\n    const { email, password } = req.body as { email: string; password: string };\r\n\r\n    if (!email || !password) {\r\n      return res(ctx.status(400), ctx.json({ message: '이메일과 비밀번호를 입력해주세요 ' }));\r\n    }\r\n\r\n    //가상 데이터베이스에 사용자 정보 저장\r\n    userDatabase.push({ email, password });\r\n\r\n    //성공 응답 예제\r\n    return res(\r\n      ctx.status(200),\r\n      ctx.json({\r\n        token: '가입 성공 토큰',\r\n      }),\r\n    );\r\n  }),\r\n\r\n  // 로그인 핸들러\r\n  rest.post('/api/members/login', (req, res, ctx) => {\r\n    const { email, password } = req.body as { email: string; password: string };\r\n    //console.log('로그인 요청 데이터:', { email, password });\r\n\r\n    const loginUser = userDatabase.find(\r\n      (user) => user.email === email && user.password === password,\r\n    );\r\n\r\n    //성공시\r\n    if (loginUser) {\r\n      return res(\r\n        ctx.status(200),\r\n        ctx.json({\r\n          token: '로그인 성공 토큰',\r\n        }),\r\n      );\r\n    } else {\r\n      console.log('로그인 실패: 사용자 정보 불일치');\r\n      //실패시\r\n      return res(\r\n        ctx.status(400),\r\n        ctx.json({ message: '로그인에 실패했습니다. 아이디나 비밀번호를 확인해주세요' }),\r\n      );\r\n    }\r\n  }),\r\n];\r\n","import { setupWorker } from 'msw';\r\n\r\nimport { categoriesMockHandler } from '@/api/hooks/categories.mock';\r\nimport { interestHandlers } from '@/api/hooks/interestHandlers';\r\n//import { loginHandler } from '@/api/hooks/login.mock';\r\nimport { productsMockHandler } from '@/api/hooks/products.mock';\r\n\r\nimport { handlers } from './handlers';\r\n\r\nexport const worker = setupWorker(\r\n  ...categoriesMockHandler,\r\n  ...productsMockHandler,\r\n  ...interestHandlers,\r\n  // ...loginHandler,\r\n  ...handlers,\r\n);\r\n"],"names":["categoriesMockHandler","rest","get","getCategoriesPath","_","res","ctx","json","CATEGORIES_RESPONSE_DATA","id","name","description","color","imageUrl","wishesDatabase","nextId","interestHandlers","post","async","req","product","body","status","message","console","log","newWish","push","error","page","parseInt","url","searchParams","size","totalElements","length","totalPages","Math","ceil","start","end","content","slice","pageable","sort","sorted","unsorted","empty","pageNumber","pageSize","offset","unpaged","paged","last","number","numberOfElements","first","delete","wishId","params","Array","isArray","index","findIndex","wish","splice","productsMockHandler","getProductsPath","categoryId","PRODUCTS_MOCK_DATA","getProductDetailPath","productId","find","item","toString","getProductOptionsPath","quantity","price","userDatabase","email","password","handlers","token","user","worker","setupWorker"],"sourceRoot":""}